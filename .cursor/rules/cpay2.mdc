---
alwaysApply: true
---
### ðŸ”’ Project Rule Addendum: Full Stack Enforcement for CPay Platform (Enterprise Grade)

As of today, the following operational standard is added to the active CPay Platform development rules:

#### 7. Full Stack Logic Wiring is Mandatory

* Every backend function, database operation, or API endpoint must be **fully wired to a corresponding frontend flow or UI interaction** as described in the BRD Phase 1.
* Every frontend screen or action must invoke its actual backend logic. **No stubs, placeholders, or disconnected UI logic** are allowed.
* I will **not consider any feature complete unless the full flow works from frontend to backend and vice versa.**
* All logic must be working in both local and deployed environments.

#### 8. All Flows Must Be Enterprise-Grade

* Code must follow enterprise-grade architecture patterns (modular, testable, observable).
* I will **automatically enforce best practices** for validation, error handling, loading states, and retries.
* Features must pass **end-to-end flow tests**, including real-time state updates (e.g., balance updates after transfer), API security checks, and UX error boundaries.

#### 9. Default Rule: Build Fully Working Products, Not Just Code

* The default assumption is **everything I build is meant to be deployed and used immediately**, not just as example or demo.
* All screens, APIs, flows, and backend logic must be:

  * Wired together automatically.
  * Tested for correct state transitions.
  * UX-verified against the requirement's intent.
  * Connected to real data (Firestore, RTDB, etc.), not mocks.

#### 10. Self-Verification is My Default Behavior

* I will **auto-test or auto-check the success of every flow I implement**.
* If a form is built, I will test its submission.
* If an endpoint is exposed, I will call it from the UI.
* If a transaction is initiated, I will verify the result in the database and front end.

---



### ðŸ”’ Project Rule Addendum: Full Stack Enforcement for CPay Platform (Enterprise Grade)

As of today, the following operational standard is added to the active CPay Platform development rules:

#### 7. Full Stack Logic Wiring is Mandatory

* Every backend function, database operation, or API endpoint must be **fully wired to a corresponding frontend flow or UI interaction** as described in the BRD Phase 1.
* Every frontend screen or action must invoke its actual backend logic. **No stubs, placeholders, or disconnected UI logic** are allowed.
* I will **not consider any feature complete unless the full flow works from frontend to backend and vice versa.**
* All logic must be working in both local and deployed environments.

#### 8. All Flows Must Be Enterprise-Grade

* Code must follow enterprise-grade architecture patterns (modular, testable, observable).
* I will **automatically enforce best practices** for validation, error handling, loading states, and retries.
* Features must pass **end-to-end flow tests**, including real-time state updates (e.g., balance updates after transfer), API security checks, and UX error boundaries.

#### 9. Default Rule: Build Fully Working Products, Not Just Code

* The default assumption is **everything I build is meant to be deployed and used immediately**, not just as example or demo.
* All screens, APIs, flows, and backend logic must be:

  * Wired together automatically.
  * Tested for correct state transitions.
  * UX-verified against the requirement's intent.
  * Connected to real data (Firestore, RTDB, etc.), not mocks.

#### 10. Self-Verification is My Default Behavior

* I will **auto-test or auto-check the success of every flow I implement**.
* If a form is built, I will test its submission.
* If an endpoint is exposed, I will call it from the UI.
* If a transaction is initiated, I will verify the result in the database and front end.

---

